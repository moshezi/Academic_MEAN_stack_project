"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("chat"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),function(app){app.registerModule("customers",["chart.js"])}(ApplicationConfiguration),function(app){app.registerModule("expenses")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("articles").run(["Menus",function(Menus){}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("articles",{"abstract":!0,url:"/articles",template:"<ui-view/>"}).state("articles.list",{url:"",templateUrl:"modules/articles/client/views/list-articles.client.view.html"}).state("articles.create",{url:"/create",templateUrl:"modules/articles/client/views/create-article.client.view.html",data:{roles:["user","admin"]}}).state("articles.view",{url:"/:articleId",templateUrl:"modules/articles/client/views/view-article.client.view.html"}).state("articles.edit",{url:"/:articleId/edit",templateUrl:"modules/articles/client/views/edit-article.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("api/articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("chat").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Chat",state:"chat"})}]),angular.module("chat").config(["$stateProvider",function($stateProvider){$stateProvider.state("chat",{url:"/chat",templateUrl:"modules/chat/client/views/chat.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("chat").controller("ChatController",["$scope","$location","Authentication","Socket","$http",function($scope,$location,Authentication,Socket,$http){function getAllCustomers(){$http.get("/api/customers").success(function(data,status,headers,config){$scope.customers=data}).error(function(data,status,headers,config){})}function getAllMessages(){$http.get("/chat/allmessages").success(function(data,status,headers,config){data.map(function(value){checkIfMessageRelevant(value)&&$scope.messages.unshift(value)})}).error(function(data,status,headers,config){})}function checkIfMessageRelevant(message){if($scope.isAdvisor&&!$scope.chosenCustomer||!$scope.isAdvisor&&!$scope.user.advisor)return!1;if("status"===message.type)return $scope.isAdvisor?$scope.customers&&$scope.customers.length>0?$scope.customers.some(function(customer){return customer._id===message.sender._id}):!1:!!$scope.user.advisor&&$scope.user.advisor._id===message.sender._id;if("message"===message.type){if(!message.to)return!1;var myId=$scope.user._id,receiverId=$scope.isAdvisor?$scope.chosenCustomer._id:$scope.user.advisor._id;return message.sender._id===myId&&message.to._id===receiverId||message.sender._id===receiverId&&message.to._id===myId}}$scope.messages=[],Authentication.user||$location.path("/"),$scope.user=Authentication.user,$scope.isAdvisor=-1!==$scope.user.roles.indexOf("advisor"),Socket.socket||Socket.connect(),$scope.chooseCustomer=function(customer){$scope.chosenCustomer=customer,$scope.messages=[],getAllMessages()},$scope.isAdvisor&&getAllCustomers(),Socket.on("chatMessage",function(message){checkIfMessageRelevant(message)&&$scope.messages.unshift(message)}),getAllMessages(),$scope.sendMessage=function(){var message={text:this.messageText};if($scope.isAdvisor){if(!$scope.chosenCustomer)return;message.to=$scope.chosenCustomer}else{if(!$scope.user.advisor)return;message.to=$scope.user.advisor}Socket.emit("chatMessage",message),this.messageText=""},$scope.$on("$destroy",function(){Socket.removeListener("chatMessage")})}]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Customers",state:"customers",type:"dropdown",roles:["advisor"]}),Menus.addSubMenuItem("topbar","customers",{title:"List Customers",state:"customers.list",roles:["advisor"]})}angular.module("customers").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("customers",{"abstract":!0,url:"/customers",template:"<ui-view/>"}).state("customers.list",{url:"",templateUrl:"modules/customers/client/views/list-customers.client.view.html",controller:"CustomersListController",controllerAs:"vm",data:{pageTitle:"Customers List"}}).state("customers.month-category",{url:"/customers-month-category/:customerId/:month/:category",templateUrl:"modules/customers/client/views/customer-month-category.client.view.html",controller:"CustomersMonthCategoryController",controllerAs:"vm",resolve:{customerResolve:getCustomer,expensesResolve:getCustomerMonthCategoryExpenses},data:{pageTitle:"Customer {{ articleResolve.name }}"}}).state("customers.year-month",{url:"/customers-year-month/:customerId/:year/:month",templateUrl:"modules/customers/client/views/customer-year-month.client.view.html",controller:"CustomersYearMonthController",controllerAs:"vm",resolve:{customerResolve:getCustomer,expensesResolve:getCustomerYearMonthExpenses},data:{pageTitle:"Customer {{ articleResolve.name }}"}}).state("customers.month-week",{url:"/customers-month-week/:customerId/:month/:week",templateUrl:"modules/customers/client/views/customer-month-week.client.view.html",controller:"CustomersMonthWeekController",controllerAs:"vm",resolve:{customerResolve:getCustomer,expensesResolve:getCustomerMonthWeekExpenses},data:{pageTitle:"Customer {{ articleResolve.name }}"}}).state("customers.graph",{url:"/:customerId",templateUrl:"modules/customers/client/views/graph-customers.client.view.html",controller:"CustomersGraphController",controllerAs:"vm",resolve:{customerResolve:getCustomer,expensesResolve:getExpenses},data:{pageTitle:"Customer {{ articleResolve.name }}"}}).state("customers.view",{url:"/:customerId",templateUrl:"modules/customers/client/views/view-customer.client.view.html",controller:"CustomersController",controllerAs:"vm",resolve:{customerResolve:getCustomer},data:{pageTitle:"Customer {{ articleResolve.name }}"}})}function getCustomer($stateParams,CustomersService){return CustomersService.get({customerId:$stateParams.customerId}).$promise}function getCustomerMonthCategoryExpenses($stateParams,$http){var category=$stateParams.category,month=$stateParams.month,customerId=$stateParams.customerId;return $http.get("api/customer-month-category-expenses/"+customerId+"/"+month+"/"+category)}function getCustomerYearMonthExpenses($stateParams,$http){var year=$stateParams.year,month=$stateParams.month,customerId=$stateParams.customerId;return $http.get("api/customer-year-month-expenses/"+customerId+"/"+year+"/"+month)}function getExpenses($stateParams,$http){var customerId=$stateParams.customerId;return $http.get("/api/user-expenses/"+customerId)}function getCustomerMonthWeekExpenses($stateParams,$http){var week=$stateParams.week,month=$stateParams.month,customerId=$stateParams.customerId;return $http.get("api/customer-month-week-expenses/"+customerId+"/"+month+"/"+week)}function newCustomer(CustomersService){return new CustomersService}getCustomer.$inject=["$stateParams","CustomersService"],getCustomerYearMonthExpenses.$inject=["$stateParams","$http"],angular.module("customers").config(routeConfig),routeConfig.$inject=["$stateProvider"],getExpenses.$inject=["$stateParams","$http"],getCustomerMonthCategoryExpenses.$inject=["$stateParams","$http"],getCustomerMonthWeekExpenses.$inject=["$stateParams","$http"],newCustomer.$inject=["CustomersService"]}(),function(){angular.module("customers").controller("CustomersGraphController",["$scope","CustomersService","ExpensesService","$http","$timeout","customerResolve","expensesResolve",function($scope,CustomersService,ExpensesService,$http,$timeout,customerResolve,expensesResolve){var vm=this;$scope.thisMonthCategories=[],$scope.thisMonthCategoryValues=[],$scope.thisMonthBarData=[0,0,0,0],$scope.lastMonthCategories=[],$scope.lastMonthCategoryValues=[],$scope.lastMonthBarData=[0,0,0,0],$scope.thisYearBarData=[0,0,0,0,0,0,0,0,0,0,0,0];var refreshData=function(){$scope.monthLabelsBar=["Week 1","Week 2","Week 3","Week 4"],$scope.monthSeriesBar=["Expenses"],$scope.thisMonthLabelsPie=$scope.thisMonthCategories,$scope.thisMonthDataPie=$scope.thisMonthCategoryValues,$scope.thisMonthDataBar=[],$scope.thisMonthDataBar[0]=$scope.thisMonthBarData,$scope.lastMonthLabelsPie=$scope.lastMonthCategories,$scope.lastMonthDataPie=$scope.lastMonthCategoryValues,$scope.lastMonthDataBar=[],$scope.lastMonthDataBar[0]=$scope.lastMonthBarData,$scope.thisYearLabelsBar=["January","February","March","April","May","June","July","August","September","October","November","December"],$scope.thisYearSeriesBar=["Expenses"],$scope.thisYearDataBar=[],$scope.thisYearDataBar[0]=$scope.thisYearBarData};$scope.$back=function(){window.history.back()},vm.scope=$scope,CustomersService.query(function(results){vm.customers=results});var aggregateThisMonthPieData=function(expenses){expenses.map(function(expense,index){-1!==$scope.thisMonthCategories.indexOf(expense.category)?$scope.thisMonthCategoryValues[$scope.thisMonthCategories.indexOf(expense.category)]+=expense.amount:($scope.thisMonthCategories.push(expense.category),$scope.thisMonthCategoryValues.push(expense.amount))})};$scope.handleThisMonthPieClick=function($event){var customerId=customerResolve._id,category=$event[0].label,month=(new Date).getMonth();window.location="/customers/customers-month-category/"+customerId+"/"+month+"/"+category},$scope.handleThisMonthBarClick=function($event){var customerId=customerResolve._id,week=$event[0].label.slice(-1),month=(new Date).getMonth();window.location="/customers/customers-month-week/"+customerId+"/"+month+"/"+week},$scope.handleLastMonthPieClick=function($event){var customerId=customerResolve._id,category=$event[0].label,month=(new Date).getMonth()-1;window.location="/customers/customers-month-category/"+customerId+"/"+month+"/"+category},$scope.handleLastMonthBarClick=function($event){var customerId=customerResolve._id,week=$event[0].label.slice(-1),month=(new Date).getMonth()-1;window.location="/customers/customers-month-week/"+customerId+"/"+month+"/"+week},$scope.handleThisYearBarClick=function($event){var customerId=customerResolve._id,month=$scope.thisYearLabelsBar.indexOf($event[0].label)+1,year=(new Date).getFullYear();window.location="/customers/customers-year-month/"+customerId+"/"+year+"/"+month};var aggregateThisMonthBarData=function(expenses){expenses.map(function(expense){var expenseDate=new Date(expense.expenseDate),weekNumbar=0|expenseDate.getDate()/7;weekNumbar>3&&(weekNumbar=3),$scope.thisMonthBarData[weekNumbar]+=expense.amount})},aggregateLastMonthPieData=function(expenses){expenses.map(function(expense,index){-1!==$scope.lastMonthCategories.indexOf(expense.category)?$scope.lastMonthCategoryValues[$scope.lastMonthCategories.indexOf(expense.category)]+=expense.amount:($scope.lastMonthCategories.push(expense.category),$scope.lastMonthCategoryValues.push(expense.amount))})},aggregateLastMonthBarData=function(expenses){expenses.map(function(expense){var expenseDate=new Date(expense.expenseDate),weekNumbar=0|expenseDate.getDate()/7;weekNumbar>3&&(weekNumbar=3),$scope.lastMonthBarData[weekNumbar]+=expense.amount})},aggregatethisYearBarData=function(expenses){expenses.map(function(expense){var expenseDate=new Date(expense.expenseDate);$scope.thisYearBarData[expenseDate.getMonth()]+=expense.amount})};ExpensesService.query(function(results){vm.expenses=results;var now=new Date,thisMonthExpenses=vm.expenses.filter(function(expense){return new Date(expense.expenseDate).getMonth()===now.getMonth()?expense:void 0}),lastMonthExpenses=vm.expenses.filter(function(expense){return new Date(expense.expenseDate).getMonth()===now.getMonth()-1?expense:void 0}),thisYearExpenses=vm.expenses.filter(function(expense){return new Date(expense.expenseDate).getYear()===now.getYear()?expense:void 0});aggregateThisMonthPieData(thisMonthExpenses),aggregateThisMonthBarData(thisMonthExpenses),aggregateLastMonthPieData(lastMonthExpenses),aggregateLastMonthBarData(lastMonthExpenses),aggregatethisYearBarData(thisYearExpenses),refreshData(),window.dispatchEvent(new Event("resize"))}),vm.customer=customerResolve,vm.getExpensesForCustomer=expensesResolve.data}])}(),function(){angular.module("customers").controller("CustomersMonthCategoryController",["$scope","CustomersService","ExpensesService","$http","$timeout","customerResolve","expensesResolve","$state",function($scope,CustomersService,ExpensesService,$http,$timeout,customerResolve,expensesResolve,$state){$scope.expenses=expensesResolve.data,$scope.customer=customerResolve,$scope.months=["January","February","March","April","May","June","July","August","September","October","November","December"],$scope.category=$state.params.category,$scope.month=$state.params.month,$scope.$back=function(){window.history.back()}}])}(),function(){angular.module("customers").controller("CustomersMonthWeekController",["$scope","CustomersService","ExpensesService","$http","$timeout","customerResolve","expensesResolve","$state",function($scope,CustomersService,ExpensesService,$http,$timeout,customerResolve,expensesResolve,$state){$scope.expenses=expensesResolve.data,$scope.customer=customerResolve,$scope.months=["January","February","March","April","May","June","July","August","September","October","November","December"],$scope.weeks=["1st","2nd","3rd","4th"],$scope.week=$state.params.week,$scope.month=$state.params.month,$scope.$back=function(){window.history.back()}}])}(),function(){angular.module("customers").controller("CustomersYearMonthController",["$scope","CustomersService","ExpensesService","$http","$timeout","customerResolve","expensesResolve","$state",function($scope,CustomersService,ExpensesService,$http,$timeout,customerResolve,expensesResolve,$state){$scope.expenses=expensesResolve.data,$scope.customer=customerResolve,$scope.months=["January","February","March","April","May","June","July","August","September","October","November","December"],$scope.year=$state.params.year,$scope.month=$state.params.month,$scope.$back=function(){window.history.back()}}])}(),function(){function CustomersController($scope,$state,Authentication,customer){function remove(){confirm("Are you sure you want to delete?")&&vm.customer.$remove($state.go("customers.list"))}function save(isValid){function successCallback(res){$state.go("customers.view",{customerId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.customer._id?vm.customer.$update(successCallback,errorCallback):vm.customer.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.customerForm"),!1)}var vm=this;vm.authentication=Authentication,vm.customer=customer,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("customers").controller("CustomersController",CustomersController),CustomersController.$inject=["$scope","$state","Authentication","customerResolve"]}(),function(){angular.module("customers").controller("CustomersListController",["$scope","CustomersService","ExpensesService","$http","$timeout",function($scope,CustomersService,ExpensesService,$http,$timeout){var vm=this;vm.scope=$scope,CustomersService.query(function(results){vm.customers=results}),ExpensesService.query(function(results){vm.expenses=results}),vm.showGraph=function(customer){},vm.getExpensesForCustomer=function(customerId){vm.currentCustomerExpenses=[],$http.get("/api/user-expenses/"+customerId).then(function(results){$timeout(function(){vm.currentCustomerExpenses=results.data})})}}])}(),function(){function CustomersService($resource){return $resource("api/customers/:customerId",{customerId:"@_id"},{update:{method:"PUT"}})}angular.module("customers").factory("CustomersService",CustomersService),CustomersService.$inject=["$resource"]}(),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Expenses",state:"expenses",type:"dropdown",roles:["admin","customer"]}),Menus.addSubMenuItem("topbar","expenses",{title:"List Expenses",state:"expenses.list",roles:["admin","customer"]}),Menus.addSubMenuItem("topbar","expenses",{title:"Manage Advisors",state:"expenses.advisors",roles:["admin","customer"]}),Menus.addSubMenuItem("topbar","expenses",{title:"Create Expense",state:"expenses.create",roles:["admin","customer"]})}angular.module("expenses").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("expenses.advisors",{url:"/advisors",templateUrl:"modules/expenses/client/views/advisors.client.view.html",controller:"AdvisorsController",controllerAs:"vm"}).state("expenses",{"abstract":!0,url:"/expenses",template:"<ui-view/>"}).state("expenses.list",{url:"",templateUrl:"modules/expenses/client/views/list-expenses.client.view.html",controller:"ExpensesListController",controllerAs:"vm",data:{pageTitle:"Expenses List"}}).state("expenses.create",{url:"/create",templateUrl:"modules/expenses/client/views/form-expense.client.view.html",controller:"ExpensesController",controllerAs:"vm",resolve:{expenseResolve:newExpense},data:{roles:["user","admin"],pageTitle:"Expenses Create"}}).state("expenses.edit",{url:"/:expenseId/edit",templateUrl:"modules/expenses/client/views/form-expense.client.view.html",controller:"ExpensesController",controllerAs:"vm",resolve:{expenseResolve:getExpense},data:{roles:["user","admin"],pageTitle:"Edit Expense {{ expenseResolve.name }}"}}).state("expenses.view",{url:"/:expenseId",templateUrl:"modules/expenses/client/views/view-expense.client.view.html",controller:"ExpensesController",controllerAs:"vm",resolve:{expenseResolve:getExpense},data:{pageTitle:"Expense {{ articleResolve.name }}"}})}function getExpense($stateParams,ExpensesService){return ExpensesService.get({expenseId:$stateParams.expenseId}).$promise}function newExpense(ExpensesService){return new ExpensesService}angular.module("expenses").config(routeConfig),routeConfig.$inject=["$stateProvider"],getExpense.$inject=["$stateParams","ExpensesService"],newExpense.$inject=["ExpensesService"]}(),function(){angular.module("expenses").controller("AdvisorsController",["$scope","ExpensesService","Users","Authentication",function($scope,ExpensesService,Users,Authentication){$scope.advisor=Authentication.user.advisor,$scope.users=Users.query();var fixAdvisors=function(){$scope.users.map(function(user){return user._id===Authentication.user._id?void($scope.advisor=Authentication.user.advisor):void 0})};$scope.chooseAdvisor=function(user){var newUser=new Users(Authentication.user);newUser.advisor=user,newUser.$update(function(response){Authentication.user=response,$scope.advisor=Authentication.user.advisor,fixAdvisors()},function(response){})},fixAdvisors(),$scope.isUserAdvisor=function(user){return-1!==user.roles.indexOf("advisor")}}])}(),function(){function ExpensesController($scope,$state,Authentication,expense){function remove(){confirm("Are you sure you want to delete?")&&vm.expense.$remove($state.go("expenses.list"))}function save(isValid){function successCallback(res){$state.go("expenses.view",{expenseId:res._id})}function errorCallback(res){vm.error=res.data.message}if(vm.tempExpenseDate)try{var date=moment(vm.tempExpenseDate,"DD/MM/YYYY");vm.expense.expenseDate=date.toDate().getTime()}catch(err){}return isValid?void(vm.expense._id?vm.expense.$update(successCallback,errorCallback):vm.expense.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.expenseForm"),!1)}var vm=this,moment=window.moment;vm.authentication=Authentication,vm.expense=expense,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("expenses").controller("ExpensesController",ExpensesController),ExpensesController.$inject=["$scope","$state","Authentication","expenseResolve"]}(),angular.module("expenses").controller("ExpensesListController",["ExpensesService","Authentication","$http","$timeout",function(ExpensesService,Authentication,$http,$timeout){var vm=this;vm.expenses=ExpensesService.query(),vm.currentCustomerExpenses=[],Authentication.user&&$http.get("/api/user-expenses/"+Authentication.user._id).then(function(results){$timeout(function(){vm.currentCustomerExpenses=results.data})})}]),function(){function ExpensesService($resource){return $resource("api/expenses/:expenseId",{expenseId:"@_id"},{update:{method:"PUT"}})}angular.module("expenses").factory("ExpensesService",ExpensesService),ExpensesService.$inject=["$resource"]}(),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){
return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("settings.description",{url:"/description",templateUrl:"modules/users/client/views/settings/edit-description.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?($scope.credentials.isAdvisor=!0,void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message})):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditDescriptionController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin!==password?!1:!0})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);